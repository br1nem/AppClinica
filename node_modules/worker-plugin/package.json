{
  "_args": [
    [
      {
        "raw": "worker-plugin@3.2.0",
        "scope": null,
        "escapedName": "worker-plugin",
        "name": "worker-plugin",
        "rawSpec": "3.2.0",
        "spec": "3.2.0",
        "type": "version"
      },
      "C:\\Users\\PSNDigital\\Documents\\proyectos-visual\\ClinicaFront\\node_modules\\@angular-devkit\\build-angular"
    ]
  ],
  "_from": "worker-plugin@3.2.0",
  "_hasShrinkwrap": false,
  "_id": "worker-plugin@3.2.0",
  "_location": "/worker-plugin",
  "_nodeVersion": "10.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/worker-plugin_3.2.0_1566923442808_0.08016807124522574"
  },
  "_npmUser": {
    "name": "developit",
    "email": "jason@developit.ca"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "worker-plugin@3.2.0",
    "scope": null,
    "escapedName": "worker-plugin",
    "name": "worker-plugin",
    "rawSpec": "3.2.0",
    "spec": "3.2.0",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular"
  ],
  "_resolved": "https://registry.npmjs.org/worker-plugin/-/worker-plugin-3.2.0.tgz",
  "_shasum": "ddae9f161b76fcbaacf8f54ecd037844584e43e7",
  "_shrinkwrap": null,
  "_spec": "worker-plugin@3.2.0",
  "_where": "C:\\Users\\PSNDigital\\Documents\\proyectos-visual\\ClinicaFront\\node_modules\\@angular-devkit\\build-angular",
  "author": {
    "name": "The Chromium Authors"
  },
  "babel": {
    "plugins": [
      "transform-es2015-modules-commonjs"
    ]
  },
  "bugs": {
    "url": "https://github.com/GoogleChromeLabs/worker-plugin/issues"
  },
  "contributors": [
    {
      "name": "Jason Miller",
      "email": "developit@google.com"
    }
  ],
  "dependencies": {
    "loader-utils": "^1.1.0"
  },
  "description": "Webpack plugin to bundle Workers automagically.",
  "devDependencies": {
    "@file-services/memory": "^1.0.3",
    "@file-services/node": "^1.0.3",
    "@file-services/overlay": "^1.0.3",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.26.2",
    "clean-webpack-plugin": "^1.0.0",
    "eslint": "^5.9.0",
    "eslint-config-standard": "^12.0.0",
    "eslint-plugin-import": "^2.14.0",
    "eslint-plugin-node": "^8.0.0",
    "eslint-plugin-promise": "^4.0.1",
    "eslint-plugin-standard": "^4.0.0",
    "jest": "^23.6.0",
    "memory-fs": "^0.4.1",
    "microbundle": "^0.8.2",
    "puppeteer": "^1.11.0",
    "serve-handler": "^5.0.7",
    "terser-webpack-plugin": "^1.1.0",
    "webpack": "^4.26.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-W5nRkw7+HlbsEt3qRP6MczwDDISjiRj2GYt9+bpe8A2La00TmJdwzG5bpdMXhRt1qcWmwAvl1TiKaHRa+XDS9Q==",
    "shasum": "ddae9f161b76fcbaacf8f54ecd037844584e43e7",
    "tarball": "https://registry.npmjs.org/worker-plugin/-/worker-plugin-3.2.0.tgz",
    "fileCount": 12,
    "unpackedSize": 46279,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdZVqzCRA9TVsSAnZWagAAIjwQAIHOwzcvzkDBjkQZ3NgL\n+VfT0VgETiU9o4qHdg/ujUi3O446t5FI0Yppk3gZdijzwAlHT4WmlmrjqD2g\nvk/BGLvcUE11qyUtVi5Us4igvhf3r46bxSlEz00uqN3/7Jqxnhv07YE8AfJc\nUdBPsRAHAc/MfGg0T0AjA0KmVh/J/4tTn9HDFp1L0fYi15JoD5iEAjtkUxI5\nGMmr1c3WnwBPQ2rROn0iSv1Wr6frg22FQF2rgd/bRzkFsAO4QQaOS+xA7xTZ\n8OnAdMZzG8L59bebUUfGQjK0QOje1OFZY4NfqkNyAMruMp4bf6izqU0FRkF4\nkS7HDJqwFdGE23TGzdTjqmKyGBQ2J5SNQ7FFXDfPjJ/TL8jGXBeL/Tg9cw+2\n8/yr+4jUEW91yAZtaFzdT31s4v6jp+LzLQ8cL9lcRqtO3n88nRGVPE1v9hbd\nZPKORokLu2u/VxsaUF+ELWK40fE7BHiNqm3hLGfZ8JeENOV6zySkq0fCX+ps\n+QhFla+QqsmWBMSensQHd6hQyEh4Sm5fw5Y1y3Nnrzs3gxMyPtw/FtLVhHUF\no9+ZfK9gqaPhV81mo7wtUBUgYJMIP4rShPibLk+xJw+lSXC8rpLHvULHpao8\nPw+5FDPZlrr16FtxNvjuTj5drrGlS2fXP7ybpAmA5WJ8uTfqST4R8Juiy3lp\nWVgf\r\n=i6EW\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eslintConfig": {
    "extends": "eslint-config-standard",
    "env": {
      "browser": true,
      "jest": true
    },
    "rules": {
      "indent": [
        "error",
        2
      ],
      "semi": [
        "error",
        "always"
      ]
    }
  },
  "files": [
    "src",
    "dist"
  ],
  "gitHead": "7c353d57605f3dd06f508f56325ea2cca3a591b8",
  "homepage": "https://github.com/GoogleChromeLabs/worker-plugin#readme",
  "jest": {
    "watchPathIgnorePatterns": [
      "<rootDir>/node_modules/",
      "<rootDir>/test/fixtures/"
    ]
  },
  "keywords": [
    "webpack",
    "plugin",
    "worker",
    "web worker",
    "thread"
  ],
  "license": "Apache-2.0",
  "main": "dist/worker-plugin.js",
  "maintainers": [
    {
      "name": "developit",
      "email": "jason@developit.ca"
    }
  ],
  "name": "worker-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": ">= 4"
  },
  "readme": "<p align=\"center\">\n  <img src=\"https://i.imgur.com/MlrAQjl.jpg\" width=\"1000\" alt=\"worker-plugin\">\n</p>\n<h1 align=\"center\">üë©‚Äçüè≠ worker-plugin</h1>\n<p align=\"center\">Automatically bundle & compile Web Workers within Webpack.</p>\n\n\n### Features\n\nAutomatically compiles modules loaded in Web Workers:\n\n```js\nconst worker = new Worker('./foo.js', { type: 'module' });\n                          ^^^^^^^^^^\n                          gets bundled using webpack\n```\n\nThe best part? That worker constructor works just fine without bundling turned on too.\n\nWorkers created from Blob & data URLs or without the `{ type:'module' }` option are left unchanged.\n\n## Installation\n\n```sh\nnpm install -D worker-plugin\n```\n\nThen drop it into your **webpack.config.js:**\n\n```diff\n+ const WorkerPlugin = require('worker-plugin');\n\nmodule.exports = {\n  <...>\n  plugins: [\n+    new WorkerPlugin()\n  ]\n  <...>\n}\n```\n\n## Usage\n\n**worker.js**: _(our worker module)_\n\n```js\n// This is a module worker, so we can use imports (in the browser too!)\nimport { calculatePi } from './some-other-module';\n\naddEventListener('message', event => {\n  postMessage(calculatePi(event.data));\n});\n```\n\n**main.js**: _(our demo, on the main thread)_\n\n```js\nconst piWorker = new Worker('./worker.js', { type: 'module' });\npiWorker.onmessage = event => {\n  console.log('pi: ' + event.data);\n};\npiWorker.postMessage(42);\n```\n\n## Options\n\nIn most cases, no options are necessary to use WorkerPlugin.\n\n### `globalObject`\n\nWorkerPlugin will warn you if your Webpack configuration has `output.globalObject` set to `window`, since doing so breaks Hot Module Replacement in web workers.\n\nIf you're not using HMR and want to disable this warning, pass `globalObject:false`:\n\n```js\nnew WorkerPlugin({\n  // disable warnings about \"window\" breaking HMR:\n  globalObject: false\n})\n```\n\nTo configure the value of `output.globalObject` for WorkerPlugin's internal Webpack Compiler, set `globalObject` to any String:\n\n```js\nnew WorkerPlugin({\n  // use \"self\" as the global object when receiving hot updates.\n  globalObject: 'self' // <-- this is the default value\n})\n```\n\n### `plugins`\n\nBy default, `WorkerPlugin` doesn't run any of your configured Webpack plugins when bundling worker code - this avoids running things like `html-webpack-plugin` twice. For cases where it's necessary to apply a plugin to Worker code, use the `plugins` option.\n\nHere you can specify the names of plugins to \"copy\" from your existing Webpack configuration, or provide specific plugins to apply only to worker code:\n\n```js\nmodule.exports = {\n  <...>\n  plugins: [\n    // an example of a plugin already being used:\n    new SomeExistingPlugin({ <...> }),\n\n    new WorkerPlugin({\n      plugins: [\n        // A string here will copy the named plugin from your configuration:\n        'SomeExistingPlugin',\n        \n        // Or you can specify a plugin directly, only applied to Worker code:\n        new SomePluginToApplyOnlyToWorkers({ <...> })\n      ]\n    })\n  ]\n  <...>\n}\n```\n\n## License\n\nApache-2.0\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/GoogleChromeLabs/worker-plugin.git"
  },
  "scripts": {
    "build": "microbundle --inline none --format cjs --no-compress src/*.js",
    "dev": "jest --verbose --watchAll",
    "prepack": "npm run build",
    "release": "npm t && git commit -am $npm_package_version && git tag $npm_package_version && git push && git push --tags && npm publish",
    "test": "npm run build && jest --verbose"
  },
  "version": "3.2.0"
}
