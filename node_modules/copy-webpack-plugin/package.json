{
  "_args": [
    [
      {
        "raw": "copy-webpack-plugin@5.0.4",
        "scope": null,
        "escapedName": "copy-webpack-plugin",
        "name": "copy-webpack-plugin",
        "rawSpec": "5.0.4",
        "spec": "5.0.4",
        "type": "version"
      },
      "C:\\Users\\PSNDigital\\Documents\\proyectos-visual\\ClinicaFront\\node_modules\\@angular-devkit\\build-angular"
    ]
  ],
  "_from": "copy-webpack-plugin@5.0.4",
  "_hasShrinkwrap": false,
  "_id": "copy-webpack-plugin@5.0.4",
  "_location": "/copy-webpack-plugin",
  "_nodeVersion": "10.15.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/copy-webpack-plugin_5.0.4_1564137489001_0.5557662016854732"
  },
  "_npmUser": {
    "name": "evilebottnawi",
    "email": "sheo13666q@gmail.com"
  },
  "_npmVersion": "6.10.1",
  "_phantomChildren": {
    "bluebird": "3.7.2",
    "chownr": "1.1.3",
    "commondir": "1.0.1",
    "figgy-pudding": "3.5.1",
    "glob": "7.1.4",
    "graceful-fs": "4.2.3",
    "lru-cache": "5.1.1",
    "make-dir": "2.1.0",
    "mississippi": "3.0.0",
    "mkdirp": "0.5.1",
    "move-concurrently": "1.0.1",
    "pkg-dir": "3.0.0",
    "promise-inflight": "1.0.1",
    "rimraf": "2.7.1",
    "ssri": "6.0.1",
    "unique-filename": "1.1.1",
    "y18n": "4.0.0"
  },
  "_requested": {
    "raw": "copy-webpack-plugin@5.0.4",
    "scope": null,
    "escapedName": "copy-webpack-plugin",
    "name": "copy-webpack-plugin",
    "rawSpec": "5.0.4",
    "spec": "5.0.4",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular"
  ],
  "_resolved": "https://registry.npmjs.org/copy-webpack-plugin/-/copy-webpack-plugin-5.0.4.tgz",
  "_shasum": "c78126f604e24f194c6ec2f43a64e232b5d43655",
  "_shrinkwrap": null,
  "_spec": "copy-webpack-plugin@5.0.4",
  "_where": "C:\\Users\\PSNDigital\\Documents\\proyectos-visual\\ClinicaFront\\node_modules\\@angular-devkit\\build-angular",
  "author": {
    "name": "Len Boyette"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/copy-webpack-plugin/issues"
  },
  "dependencies": {
    "cacache": "^11.3.3",
    "find-cache-dir": "^2.1.0",
    "glob-parent": "^3.1.0",
    "globby": "^7.1.1",
    "is-glob": "^4.0.1",
    "loader-utils": "^1.2.3",
    "minimatch": "^3.0.4",
    "normalize-path": "^3.0.0",
    "p-limit": "^2.2.0",
    "schema-utils": "^1.0.0",
    "serialize-javascript": "^1.7.0",
    "webpack-log": "^2.0.0"
  },
  "description": "Copy files && directories with webpack",
  "devDependencies": {
    "@babel/cli": "^7.5.5",
    "@babel/core": "^7.5.5",
    "@babel/preset-env": "^7.5.5",
    "@commitlint/cli": "^8.1.0",
    "@commitlint/config-conventional": "^8.1.0",
    "@webpack-contrib/defaults": "^5.0.2",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^24.8.0",
    "commitlint-azure-pipelines-cli": "^1.0.1",
    "cross-env": "^5.2.0",
    "del": "^4.1.1",
    "del-cli": "^1.1.0",
    "enhanced-resolve": "^4.1.0",
    "eslint": "^6.0.1",
    "eslint-config-prettier": "^6.0.0",
    "eslint-plugin-import": "^2.18.1",
    "husky": "^3.0.1",
    "is-gzip": "^2.0.0",
    "jest": "^24.8.0",
    "jest-junit": "^6.4.0",
    "lint-staged": "^9.2.0",
    "memory-fs": "^0.4.1",
    "mkdirp": "^0.5.1",
    "npm-run-all": "^4.1.5",
    "prettier": "^1.18.2",
    "standard-version": "^6.0.1",
    "webpack": "^4.36.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-YBuYGpSzoCHSSDGyHy6VJ7SHojKp6WHT4D7ItcQFNAYx2hrwkMe56e97xfVR0/ovDuMTrMffXUiltvQljtAGeg==",
    "shasum": "c78126f604e24f194c6ec2f43a64e232b5d43655",
    "tarball": "https://registry.npmjs.org/copy-webpack-plugin/-/copy-webpack-plugin-5.0.4.tgz",
    "fileCount": 13,
    "unpackedSize": 55799,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdOtgRCRA9TVsSAnZWagAAdH8P/3O60wDIDSctvf3HjznM\nSF2jEe/HZtaTnFnOHENxAAeWwr0b1w+Y9PvF/IaaWJtLJCso/QKutAK1M1M4\n7chwhwLdl9fvqbftBa0RUtwJ5W6AwYoyiFKeykyRpE5zE6Se5KRDZE/hdtW/\n3+lZw4cELEAVqAM1GefKiah49K+iXtyLeoPmUzgl75QhM/avFB0Jz6TGV/8a\nd0nT17dmjuzMwvjBAMQ3h8z9tVpJdki+V40K9Mc1wOW95vqWLbR7Lhj5N1Cs\nhE+O80aZz0G7s7FAyv2e7faaQiRVjtEVZn1AYenBaoIEHMHk/U1d2WrJan+h\njjKdGmxKyBO35ot07obmJo+c4XM35vKptnlXbuh4197rezKTCzPS0cxO3AaM\nB8YVJNjA4KhN96Amznx5f4OzePAIGzve6jXXkueMMfedHlKLQAbGNzwFRJNl\nSw4xNV/6NWYGBO3qWFrxWDuCwcLFyUmWSxv6wxfcgrN1XG5l5YPeHFirPvGz\nh+4RmdBtJuylm5yy19PE2MfkZR8BNDKAX4yemieeHndI3oIBHUMEpDPVjCN9\nMF0j+47187MtScB+TjilfLnBwvKtcvdWYRsy63ztlpeiHtySABQ8LfQEs64F\nLXBDSxS9uJxZs5BJiyGtA5UacHjV1xKlfTzzRyw+cyUaHIq4d9Lfc9+PAbBn\n8U6A\r\n=/YFl\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6.9.0"
  },
  "files": [
    "dist"
  ],
  "gitHead": "61584837d9ee08df9ac58071e266406d44e46e00",
  "homepage": "https://github.com/webpack-contrib/copy-webpack-plugin",
  "keywords": [
    "webpack",
    "plugin",
    "transfer",
    "move",
    "copy"
  ],
  "license": "MIT",
  "main": "dist/cjs.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "d3viant0ne",
      "email": "wiens.joshua@gmail.com"
    },
    {
      "name": "kevlened",
      "email": "boyettel@gmail.com"
    },
    {
      "name": "michael-ciniawsky",
      "email": "michael.ciniawsky@gmail.com"
    }
  ],
  "name": "copy-webpack-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^4.0.0"
  },
  "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# copy-webpack-plugin\n\nCopies individual files or entire directories, which already exist, to the build directory.\n\n## Getting Started\n\nTo begin, you'll need to install `copy-webpack-plugin`:\n\n```console\n$ npm install copy-webpack-plugin --save-dev\n```\n\nThen add the plugin to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nconst CopyPlugin = require('copy-webpack-plugin');\n\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      { from: 'source', to: 'dest' },\n      { from: 'other', to: 'public' },\n    ]),\n  ],\n};\n```\n\n> ℹ️ `webpack-copy-plugin` is not designed to copy files generated from the build process; rather, it is to copy files that already exist in the source tree, as part of the build process.\n\n> ℹ️ If you want `webpack-dev-server` to write files to the output directory during development, you can force it with the [`writeToDisk`](https://github.com/webpack/webpack-dev-middleware#writetodisk) option or the [`write-file-webpack-plugin`](https://github.com/gajus/write-file-webpack-plugin).\n\n## Options\n\nThe plugin's signature:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin(patterns, options)],\n};\n```\n\n### Patterns\n\n|               Name                |         Type          |                     Default                     | Description                                                                                           |\n| :-------------------------------: | :-------------------: | :---------------------------------------------: | :---------------------------------------------------------------------------------------------------- |\n|          [`from`](#from)          |  `{String\\|Object}`   |                   `undefined`                   | Glob or path from where we сopy files.                                                                |\n|            [`to`](#to)            |      `{String}`       |                   `undefined`                   | Output path.                                                                                          |\n|       [`context`](#context)       |      `{String}`       | `options.context \\|\\| compiler.options.context` | A path that determines how to interpret the `from` path.                                              |\n|        [`toType`](#toType)        |      `{String}`       |                   `undefined`                   | Determinate what is `to` option - directory, file or template.                                        |\n|          [`test`](#test)          |      `{RegExp}`       |                   `undefined`                   | Pattern for extracting elements to be used in `to` templates.                                         |\n|         [`force`](#force)         |      `{Boolean}`      |                     `false`                     | Overwrites files already in `compilation.assets` (usually added by other plugins/loaders).            |\n|        [`ignore`](#ignore)        |       `{Array}`       |                      `[]`                       | Globs to ignore files.                                                                                |\n|       [`flatten`](#flatten)       |      `{Boolean}`      |                     `false`                     | Removes all directory references and only copies file names.                                          |\n|         [`cache`](#cache)         |  `{Boolean\\|Object}`  |                     `false`                     | Enable `transform` caching. You can use `{ cache: { key: 'my-cache-key' } }` to invalidate the cache. |\n|     [`transform`](#transform)     | `{Function\\|Promise}` |                   `undefined`                   | Allows to modify the file contents.                                                                   |\n| [`transformPath`](#transformPath) | `{Function\\|Promise}` |                   `undefined`                   | Allows to modify the writing path.                                                                    |\n\n#### `from`\n\nType: `String\\|Object`\nDefault: `undefined`\n\nGlob or path from where we сopy files.\nGlobs accept [minimatch options](https://github.com/isaacs/minimatch).\n\nYou can define `from` as `Object` and use the [`node-glob` options](https://github.com/isaacs/node-glob#options).\n\n> ⚠️ Don't use directly `\\\\` in `from` (i.e `path\\to\\file.ext`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      'relative/path/to/file.ext',\n      '/absolute/path/to/file.ext',\n      'relative/path/to/dir',\n      '/absolute/path/to/dir',\n      '**/*',\n      { glob: '**/*', dot: false },\n    ]),\n  ],\n};\n```\n\n#### `to`\n\nType: `String`\nDefault: `undefined`\n\nOutput path.\n\n> ⚠️ Don't use directly `\\\\` in `to` (i.e `path\\to\\dest`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      { from: '**/*', to: 'relative/path/to/dest/' },\n      { from: '**/*', to: '/absolute/path/to/dest/' },\n    ]),\n  ],\n};\n```\n\n#### `context`\n\nType: `String`\nDefault: `options.context|compiler.options.context`\n\nA path that determines how to interpret the `from` path.\n\n> ⚠️ Don't use directly `\\\\` in `context` (i.e `path\\to\\context`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.txt',\n        to: 'dest/',\n        context: 'app/',\n      },\n    ]),\n  ],\n};\n```\n\n#### `toType`\n\nType: `String`\nDefault: `undefined`\n\nDeterminate what is `to` option - directory, file or template.\nSometimes it is hard to say what is `to`, example `path/to/dir-with.ext`.\nIf you want to copy files in directory you need use `dir` option.\nWe try to automatically determine the `type` so you most likely do not need this option.\n\n|       Name       |    Type    |   Default   | Description                                                                                        |\n| :--------------: | :--------: | :---------: | :------------------------------------------------------------------------------------------------- |\n|   **`'dir'`**    | `{String}` | `undefined` | If `from` is directory, `to` has no extension or ends in `'/'`                                     |\n|   **`'file'`**   | `{String}` | `undefined` | If `to` has extension or `from` is file                                                            |\n| **`'template'`** | `{String}` | `undefined` | If `to` contains [a template pattern](https://github.com/webpack-contrib/file-loader#placeholders) |\n\n##### `'dir'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'path/to/file.txt',\n        to: 'directory/with/extension.ext',\n        toType: 'dir',\n      },\n    ]),\n  ],\n};\n```\n\n##### `'file'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'path/to/file.txt',\n        to: 'file/without/extension',\n        toType: 'file',\n      },\n    ]),\n  ],\n};\n```\n\n##### `'template'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/',\n        to: 'dest/[name].[hash].[ext]',\n        toType: 'template',\n      },\n    ]),\n  ],\n};\n```\n\n#### `test`\n\nType: `RegExp`\nDefault: `undefined`\n\nPattern for extracting elements to be used in `to` templates.\n\nDefines a `{RegExp}` to match some parts of the file path.\nThese capture groups can be reused in the name property using `[N]` placeholder.\nNote that `[0]` will be replaced by the entire path of the file,\nwhereas `[1]` will contain the first capturing parenthesis of your `{RegExp}`\nand so on...\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: '*/*',\n        to: '[1]-[2].[hash].[ext]',\n        test: /([^/]+)\\/(.+)\\.png$/,\n      },\n    ]),\n  ],\n};\n```\n\n#### `force`\n\nType: `Boolean`\nDefault: `false`\n\nOverwrites files already in `compilation.assets` (usually added by other plugins/loaders).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/**/*',\n        to: 'dest/',\n        force: true,\n      },\n    ]),\n  ],\n};\n```\n\n#### `ignore`\n\nType: `Array`\nDefault: `[]`\n\nGlobs to ignore files.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/**/*',\n        to: 'dest/',\n        ignore: ['*.js'],\n      },\n    ]),\n  ],\n};\n```\n\n#### `flatten`\n\nType: `Boolean`\nDefault: `false`\n\nRemoves all directory references and only copies file names.\n\n> ⚠️ If files have the same name, the result is non-deterministic.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/**/*',\n        to: 'dest/',\n        flatten: true,\n      },\n    ]),\n  ],\n};\n```\n\n#### `cache`\n\nType: `Boolean|Object`\nDefault: `false`\n\nEnable/disable `transform` caching. You can use `{ cache: { key: 'my-cache-key' } }` to invalidate the cache.\nDefault path to cache directory: `node_modules/.cache/copy-webpack-plugin`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transform(content, path) {\n          return optimize(content);\n        },\n        cache: true,\n      },\n    ]),\n  ],\n};\n```\n\n#### `transform`\n\nType: `Function|Promise`\nDefault: `undefined`\n\nAllows to modify the file contents.\n\n##### `{Function}`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transform(content, path) {\n          return optimize(content);\n        },\n      },\n    ]),\n  ],\n};\n```\n\n##### `{Promise}`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transform(content, path) {\n          return Promise.resolve(optimize(content));\n        },\n      },\n    ]),\n  ],\n};\n```\n\n#### `transformPath`\n\nType: `Function|Promise`\nDefault: `undefined`\n\nAllows to modify the writing path.\n\n> ⚠️ Don't return directly `\\\\` in `transformPath` (i.e `path\\to\\newFile`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n##### `{Function}`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transformPath(targetPath, absolutePath) {\n          return 'newPath';\n        },\n      },\n    ]),\n  ],\n};\n```\n\n##### `{Promise}`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin([\n      {\n        from: 'src/*.png',\n        to: 'dest/',\n        transformPath(targePath, absolutePath) {\n          return Promise.resolve('newPath');\n        },\n      },\n    ]),\n  ],\n};\n```\n\n### Options\n\n|                Name                 |    Type     |          Default           | Description                                                                                                                                       |\n| :---------------------------------: | :---------: | :------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------ |\n|       [`logLevel`](#logLevel)       | `{String}`  |        **`'warn'`**        | Level of messages that the module will log                                                                                                        |\n|         [`ignore`](#ignore)         |  `{Array}`  |            `[]`            | Array of globs to ignore (applied to `from`)                                                                                                      |\n|        [`context`](#context)        | `{String}`  | `compiler.options.context` | A path that determines how to interpret the `from` path, shared for all patterns                                                                  |\n| [`copyUnmodified`](#copyUnmodified) | `{Boolean}` |          `false`           | Copies files, regardless of modification when using watch or `webpack-dev-server`. All files are copied on first build, regardless of this option |\n\n#### `logLevel`\n\nThis property defines the level of messages that the module will log. Valid levels include:\n\n- `trace`\n- `debug`\n- `info`\n- `warn` (default)\n- `error`\n- `silent`\n\nSetting a log level means that all other levels below it will be visible in the\nconsole. Setting `logLevel: 'silent'` will hide all console output. The module\nleverages [`webpack-log`](https://github.com/webpack-contrib/webpack-log#readme)\nfor logging management, and more information can be found on its page.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin([...patterns], { logLevel: 'debug' })],\n};\n```\n\n#### `ignore`\n\nArray of globs to ignore (applied to `from`).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin([...patterns], { ignore: ['*.js', '*.css'] })],\n};\n```\n\n#### `context`\n\nA path that determines how to interpret the `from` path, shared for all patterns.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin([...patterns], { context: '/app' })],\n};\n```\n\n#### `copyUnmodified`\n\nCopies files, regardless of modification when using watch or `webpack-dev-server`. All files are copied on first build, regardless of this option.\n\n> ℹ️ By default, we only copy **modified** files during a `webpack --watch` or `webpack-dev-server` build. Setting this option to `true` will copy all files.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [new CopyPlugin([...patterns], { copyUnmodified: true })],\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/copy-webpack-plugin.svg\n[npm-url]: https://npmjs.com/package/copy-webpack-plugin\n[node]: https://img.shields.io/node/v/copy-webpack-plugin.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/copy-webpack-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/copy-webpack-plugin\n[tests]: https://dev.azure.com/webpack-contrib/copy-webpack-plugin/_apis/build/status/webpack-contrib.copy-webpack-plugin?branchName=master\n[tests-url]: https://dev.azure.com/webpack-contrib/copy-webpack-plugin/_build/latest?definitionId=5&branchName=master\n[cover]: https://codecov.io/gh/webpack-contrib/copy-webpack-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/copy-webpack-plugin\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=copy-webpack-plugin\n[size-url]: https://packagephobia.now.sh/result?p=copy-webpack-plugin\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/copy-webpack-plugin.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --ignore \"src/**/*.test.js\" --copy-files",
    "clean": "del-cli dist",
    "commitlint": "commitlint --from=master",
    "defaults": "webpack-defaults",
    "lint": "npm-run-all -l -p \"lint:**\"",
    "lint:js": "eslint --cache src test",
    "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css}\" --list-different",
    "prebuild": "npm run clean",
    "prepare": "npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "cross-env NODE_ENV=test npm run test:coverage",
    "test:coverage": "cross-env NODE_ENV=test jest --collectCoverageFrom=\"src/**/*.js\" --coverage",
    "test:only": "cross-env NODE_ENV=test jest",
    "test:watch": "cross-env NODE_ENV=test jest --watch"
  },
  "version": "5.0.4"
}
